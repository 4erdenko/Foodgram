
name: Foodgram workflow

on:
  push:
    branches: [master]

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  HOST: ${{ secrets.HOST }}
  USER: ${{ secrets.USER }}
  SSH_KEY: ${{ secrets.SSH_KEY }}
  SSH_PASSPHRASE: ${{ secrets.SSH_PASSPHRASE }}
  ENV: ${{ secrets.ENV }}

jobs:

  backend_tests_and_build_and_push_to_docker_hub:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: django_user
          POSTGRES_PASSWORD: django_password
          POSTGRES_DB: django_db
        ports: ['5432:5432']
        options: '--health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5'
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 flake8-isort
          pip install -r ./backend/requirements.txt
      - name: Test with flake8 and Django tests
        env:
          POSTGRES_USER: django_user
          POSTGRES_PASSWORD: django_password
          POSTGRES_DB: django_db
          DB_HOST: 127.0.0.1
          DB_PORT: 5432
          SECRET_KEY: django-secret-key
        run: |
          python -m flake8 backend/
          cd backend/
          python manage.py test
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}
      - name: Build and push Docker image
        if: matrix.python-version == '3.9'
        uses: docker/build-push-action@v3
        with:
          context: ./backend/
          push: true
          tags: 4erdenko/foodgram_backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max


  build_frontend_and_push_to_docker_hub:
    name: Push frontend Docker image to DockerHub
    needs: backend_tests_and_build_and_push_to_docker_hub
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: ./frontend/
          push: true
          tags: 4erdenko/foodgram_frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  Deployment:
    runs-on: ubuntu-latest
    needs:
      - build_frontend_and_push_to_docker_hub
    steps:
      - name: Create .env file and fill it with Github secrets
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            mkdir -p /home/${{ secrets.USER }}/foodgram/
            cd /home/${{ secrets.USER }}/foodgram/
            sudo chmod -R 755 /home/${{ secrets.USER }}/foodgram/
            cat <<EOF > .env
            ${{ secrets.ENV }}
            EOF
      - name: Checkout repo
        uses: actions/checkout@v3
      - name: Copy docker-compose.yml via ssh
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          source: "docker-compose.production.yml"
          target: "foodgram"
      - name: Copy nginx configuration file via ssh
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          source: "default.conf"
          target: "foodgram/config/nginx/conf.d"
      - name: Update directory permissions
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: sudo chmod -R 755 /home/${{ secrets.USER }}/foodgram/

      - name: Take down existing Docker Compose stack
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            cd /home/${{ secrets.USER }}/foodgram/
            sudo docker compose -f docker-compose.production.yml down

      - name: Prune Docker system
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: sudo docker system prune -f

      - name: Pull latest images
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            cd /home/${{ secrets.USER }}/foodgram/
            sudo docker compose -f docker-compose.production.yml pull

      - name: Start up the stack
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            cd /home/${{ secrets.USER }}/foodgram/
            sudo docker compose -f docker-compose.production.yml up -d

      - name: Run migrations
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            cd /home/${{ secrets.USER }}/foodgram/
            sudo docker compose -f docker-compose.production.yml exec backend python manage.py makemigrations
            sudo docker compose -f docker-compose.production.yml exec backend python manage.py migrate

      - name: Collect static files
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            cd /home/${{ secrets.USER }}/foodgram/
            sudo docker compose -f docker-compose.production.yml exec backend python manage.py collectstatic --no-input

      - name: Prune Docker images
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: sudo docker image prune -a -f

  Telegram_Notification:
    needs: Deployment
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      - name: Send deployment notification
        uses: appleboy/telegram-action@master
        if: ${{ success() }}
        env:
          TELEGRAM_MESSAGE: |
            Deployment of ${{ github.repository }} was *successful* in ${{ steps.get_deploy_time.outputs.time }} on server ${{ env.SERVER }}
            
            Commit: [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }})  
            By: @${{ github.actor }}
            
            [View on GitHub](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
        with:
           token: ${{ secrets.TELEGRAM_TOKEN }}
           to: ${{ secrets.TELEGRAM_TO }}
           format: markdown
           message: ${{ env.TELEGRAM_MESSAGE }}
